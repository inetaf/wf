// Code generated by "stringer -output=zdatatype_strings.go -type=dataType -trimprefix=dataType"; DO NOT EDIT.

package wf

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[dataTypeEmpty-0]
	_ = x[dataTypeUint8-1]
	_ = x[dataTypeUint16-2]
	_ = x[dataTypeUint32-3]
	_ = x[dataTypeUint64-4]
	_ = x[dataTypeInt8-5]
	_ = x[dataTypeInt16-6]
	_ = x[dataTypeInt32-7]
	_ = x[dataTypeInt64-8]
	_ = x[dataTypeFloat-9]
	_ = x[dataTypeDouble-10]
	_ = x[dataTypeByteArray16-11]
	_ = x[dataTypeByteBlob-12]
	_ = x[dataTypeSID-13]
	_ = x[dataTypeSecurityDescriptor-14]
	_ = x[dataTypeTokenInformation-15]
	_ = x[dataTypeTokenAccessInformation-16]
	_ = x[dataTypeUnicodeString-17]
	_ = x[dataTypeArray6-18]
	_ = x[dataTypeBitmapIndex-19]
	_ = x[dataTypeBitmapArray64-20]
	_ = x[dataTypeV4AddrMask-277]
	_ = x[dataTypeV6AddrMask-278]
	_ = x[dataTypeRange-279]
}

const (
	_dataType_name_0 = "EmptyUint8Uint16Uint32Uint64Int8Int16Int32Int64FloatDoubleByteArray16ByteBlobSIDSecurityDescriptorTokenInformationTokenAccessInformationUnicodeStringArray6BitmapIndexBitmapArray64"
	_dataType_name_1 = "V4AddrMaskV6AddrMaskRange"
)

var (
	_dataType_index_0 = [...]uint8{0, 5, 10, 16, 22, 28, 32, 37, 42, 47, 52, 58, 69, 77, 80, 98, 114, 136, 149, 155, 166, 179}
	_dataType_index_1 = [...]uint8{0, 10, 20, 25}
)

func (i dataType) String() string {
	switch {
	case i <= 20:
		return _dataType_name_0[_dataType_index_0[i]:_dataType_index_0[i+1]]
	case 277 <= i && i <= 279:
		i -= 277
		return _dataType_name_1[_dataType_index_1[i]:_dataType_index_1[i+1]]
	default:
		return "dataType(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
