// Code generated by "stringer -output=zdatatype_strings.go -type=dataType -trimprefix=dataType"; DO NOT EDIT.

package wf

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[dataTypeEmpty-0]
	_ = x[dataTypeUint8-1]
	_ = x[dataTypeUint16-2]
	_ = x[dataTypeUint32-3]
	_ = x[dataTypeUint64-4]
	_ = x[dataTypeInt8-5]
	_ = x[dataTypeInt16-6]
	_ = x[dataTypeInt32-7]
	_ = x[dataTypeInt64-8]
	_ = x[dataTypeFloat-9]
	_ = x[dataTypeDouble-10]
	_ = x[dataTypeByteArray16-11]
	_ = x[dataTypeByteBlob-12]
	_ = x[dataTypeSID-13]
	_ = x[dataTypeSecurityDescriptor-14]
	_ = x[dataTypeTokenInformation-15]
	_ = x[dataTypeTokenAccessInformation-16]
	_ = x[dataTypeUnicodeString-17]
	_ = x[dataTypeArray6-18]
	_ = x[dataTypeBitmapIndex-19]
	_ = x[dataTypeBitmapArray64-20]
}

const _dataType_name = "EmptyUint8Uint16Uint32Uint64Int8Int16Int32Int64FloatDoubleByteArray16ByteBlobSIDSecurityDescriptorTokenInformationTokenAccessInformationUnicodeStringArray6BitmapIndexBitmapArray64"

var _dataType_index = [...]uint8{0, 5, 10, 16, 22, 28, 32, 37, 42, 47, 52, 58, 69, 77, 80, 98, 114, 136, 149, 155, 166, 179}

func (i dataType) String() string {
	if i >= dataType(len(_dataType_index)-1) {
		return "dataType(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _dataType_name[_dataType_index[i]:_dataType_index[i+1]]
}
