// Code generated by "stringer -output=zdatatype_strings.go -type=DataType -trimprefix=DataType"; DO NOT EDIT.

package wf

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[DataTypeEmpty-0]
	_ = x[DataTypeUint8-1]
	_ = x[DataTypeUint16-2]
	_ = x[DataTypeUint32-3]
	_ = x[DataTypeUint64-4]
	_ = x[DataTypeInt8-5]
	_ = x[DataTypeInt16-6]
	_ = x[DataTypeInt32-7]
	_ = x[DataTypeInt64-8]
	_ = x[DataTypeFloat-9]
	_ = x[DataTypeDouble-10]
	_ = x[DataTypeByteArray16-11]
	_ = x[DataTypeByteBlob-12]
	_ = x[DataTypeSID-13]
	_ = x[DataTypeSecurityDescriptor-14]
	_ = x[DataTypeTokenInformation-15]
	_ = x[DataTypeTokenAccessInformation-16]
	_ = x[DataTypeUnicodeString-17]
	_ = x[DataTypeArray6-18]
	_ = x[DataTypeBitmapIndex-19]
	_ = x[DataTypeBitmapArray64-20]
	_ = x[DataTypeV4AddrMask-277]
	_ = x[DataTypeV6AddrMask-278]
	_ = x[DataTypeRange-279]
}

const (
	_DataType_name_0 = "EmptyUint8Uint16Uint32Uint64Int8Int16Int32Int64FloatDoubleByteArray16ByteBlobSIDSecurityDescriptorTokenInformationTokenAccessInformationUnicodeStringArray6BitmapIndexBitmapArray64"
	_DataType_name_1 = "V4AddrMaskV6AddrMaskRange"
)

var (
	_DataType_index_0 = [...]uint8{0, 5, 10, 16, 22, 28, 32, 37, 42, 47, 52, 58, 69, 77, 80, 98, 114, 136, 149, 155, 166, 179}
	_DataType_index_1 = [...]uint8{0, 10, 20, 25}
)

func (i DataType) String() string {
	switch {
	case i <= 20:
		return _DataType_name_0[_DataType_index_0[i]:_DataType_index_0[i+1]]
	case 277 <= i && i <= 279:
		i -= 277
		return _DataType_name_1[_DataType_index_1[i]:_DataType_index_1[i+1]]
	default:
		return "DataType(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
